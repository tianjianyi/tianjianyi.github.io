<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fast springboot</title>
      <link href="/2020/05/23/fast-springboot/"/>
      <url>/2020/05/23/fast-springboot/</url>
      
        <content type="html"><![CDATA[<h3 id="学Java时间越长越想去阿里"><a href="#学Java时间越长越想去阿里" class="headerlink" title="学Java时间越长越想去阿里"></a>学Java时间越长越想去阿里</h3><p>阿里提供的镜像和仓库啥的都好方便啊喜欢<br>本文推荐的是阿里的远程仓库插件，在pom.xml文件中加入，依赖导入飞起</p><pre><code> &lt;!--配置阿里云仓库--&gt;    &lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;public&lt;/id&gt;            &lt;name&gt;aliyun nexus&lt;/name&gt;            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;            &lt;releases&gt;                &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/releases&gt;            &lt;snapshots&gt;                &lt;enabled&gt;false&lt;/enabled&gt;            &lt;/snapshots&gt;        &lt;/repository&gt;    &lt;/repositories&gt;    &lt;pluginRepositories&gt;        &lt;pluginRepository&gt;            &lt;id&gt;public&lt;/id&gt;            &lt;name&gt;aliyun nexus&lt;/name&gt;            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;            &lt;releases&gt;                &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/releases&gt;            &lt;snapshots&gt;                &lt;enabled&gt;false&lt;/enabled&gt;            &lt;/snapshots&gt;        &lt;/pluginRepository&gt;    &lt;/pluginRepositories&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java,docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crawler01</title>
      <link href="/2020/03/25/crawler01/"/>
      <url>/2020/03/25/crawler01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础应用</title>
      <link href="/2020/03/23/Docker/"/>
      <url>/2020/03/23/Docker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java,docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAWEB学生管理系统</title>
      <link href="/2020/03/21/javaweb-student/"/>
      <url>/2020/03/21/javaweb-student/</url>
      
        <content type="html"><![CDATA[<p>实现过程类似于<a href="http://www.yifengfighting.cn/2020/03/19/student-exam/" target="_blank" rel="noopener">http://www.yifengfighting.cn/2020/03/19/student-exam/</a><br>只是魔改成了Javaweb，给小猪崽子做javaweb大作业用</p><p><a href="https://github.com/tianjianyi/javawebstudent" target="_blank" rel="noopener" title="GitHub">GitHub</a> 下载源码</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java_web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM学生管理系统</title>
      <link href="/2020/03/19/student-exam/"/>
      <url>/2020/03/19/student-exam/</url>
      
        <content type="html"><![CDATA[<h2 id="SSM学生管理系统"><a href="#SSM学生管理系统" class="headerlink" title="SSM学生管理系统"></a>SSM学生管理系统</h2><p>简单介绍下搬砖的经过，用时大约一天半，所用技术ssm框架，bootstrap前端框架，springsecrity 安全框架，项目这种东西知道需求和流程后，只要会写sql剩下的都是些重复性工作了。刷剧必备</p><h4 id="数据库设计-半天"><a href="#数据库设计-半天" class="headerlink" title="数据库设计(半天)"></a>数据库设计(半天)</h4><p>这东西应该是最难的，我是用的python读取excel生成sql语句，用了这么半年Java，还是python好用，泪目.jpg<br>全是真实数据不方便公布，就把python代码公布一下。不过数据库设计还是有不足，想的不充分。</p><pre><code>import matplotlib.pyplot as pltimport pandas as pdimport numpy as npimport math# date = pd.read_excel(&quot;student_import.xlsx&quot;)## id = date[&quot;学号&quot;]# # print(len(id))# for i in range(0, len(id)):#     id1 = str(id[i])#     # id1 = &quot;201711010226&quot;#     sql = &quot;insert into user (userId, PASSWORD, roldId) values (&quot;#     sql= sql + &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + id1[-6 : ] + &quot;&#39;&quot; + &quot;,&quot; + &quot;1);&quot;#     print(sql)# date = pd.read_excel(&quot;teacher_import.xlsx&quot;)## id = date[&quot;教师工号&quot;]# # print(len(id))# for i in range(0, len(id)):#     id1 = str(id[i])#     # id1 = &quot;201711010226&quot;#     sql = &quot;insert into user (userId, PASSWORD, roldId) values (&quot;#     sql= sql + &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; + &quot;2);&quot;#     print(sql)# date = pd.read_excel(&quot;student_import.xlsx&quot;)## id = date[&quot;学号&quot;]# name = date[&quot;姓名&quot;]# major = date[&quot;录取专业&quot;]# clazz = date[&quot;拟分入班级&quot;]# # print(len(id))# for i in range(0, len(id)):#     id1 = str(id[i])#     name1 = str(name[i])#     major1 = str(major[i])#     clazz1 = str(clazz[i])#     # id1 = &quot;201711010226&quot;#     sql = &quot;insert into student (    studentId, name,major,clazz) values (&quot;#     sql= sql + &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + name1 + &quot;&#39;&quot; + &quot;,&quot; + &quot;&#39;&quot; +  major1[:8] + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;计工本170&quot; + clazz1 + &quot;&#39;&quot; + &quot;);&quot;#     print(sql)# date = pd.read_excel(&quot;teacher_import.xlsx&quot;)## id = date[&quot;教师工号&quot;]# name = date[&quot;姓名&quot;]# major = date[&quot;学院&quot;]# clazz = date[&quot;所在系别&quot;]# # print(len(id))# for i in range(0, len(id)):#     id1 = str(id[i])#     name1 = str(name[i])#     major1 = str(major[i])#     clazz1 = str(clazz[i])#     # id1 = &quot;201711010226&quot;#     sql = &quot;insert into teacher (teacherId,name ,college,tie) values (&quot;#     sql= sql + &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + name1 + &quot;&#39;&quot; + &quot;,&quot; + &quot;&#39;&quot; +  major1[:8] + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;计工本170&quot; + clazz1 + &quot;&#39;&quot; + &quot;);&quot;#     print(sql)date = pd.read_excel(&quot;course_import.xlsx&quot;)id = date[&quot;课程号&quot;]name = date[&quot;课程名称&quot;]teacher = date[&quot;老师&quot;]num = date[&quot;课容量&quot;]major = date[&quot;开设教室&quot;]clazz = date[&quot;教师教工号&quot;]# print(len(id))for i in range(0, len(id)):    id1 = str(id[i])    name1 = str(name[i])    teacher1 = str(teacher[i])    num1 = str(num[i])    major1 = str(major[i])    clazz1 = str(clazz[i])    # id1 = &quot;201711010226&quot;    sql = &quot;insert into course (courseId,name ,teachername,num,room,teacherId) values (&quot;    sql= sql + &quot;&#39;&quot; + id1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + name1 + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + teacher1  + &quot;&#39;&quot; + &quot;,&quot;+num1+&quot;,&quot; + &quot;&#39;&quot; +  major1[:8] + &quot;&#39;&quot; + &quot;,&quot; +  &quot;&#39;&quot; + clazz1 + &quot;&#39;&quot; + &quot;);&quot;    print(sql)</code></pre><h4 id="admin后台"><a href="#admin后台" class="headerlink" title="admin后台"></a>admin后台</h4><p>这应该是最简单的一部分啦，学生查询，教师查询，课程查询还是他们对应的增加修改和删除，简单增删查改的运用</p><h4 id="学生后台"><a href="#学生后台" class="headerlink" title="学生后台"></a>学生后台</h4><p>学生就是选课和退课还有查成绩，也没啥可说的</p><h4 id="教师后台"><a href="#教师后台" class="headerlink" title="教师后台"></a>教师后台</h4><p>就是查学他课的学生和查成绩</p><h4 id="springsecity"><a href="#springsecity" class="headerlink" title="springsecity"></a>springsecity</h4><p>这个想说一下，看了一些登入跳转页面的方法看的我一脸懵逼，其实我的解决方法很简单</p><p>1.跳转成功页面设置为一个控制器</p><pre><code>authentication-success-forward-url=&quot;/user/login.do&quot;</code></pre><p>2.控制器根据角色跳转不同页面</p><pre><code>  @RequestMapping(&quot;/login.do&quot;)    public String login(){        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()                .getAuthentication()                .getPrincipal();        String name = userDetails.getUsername();        UserInfo userInfo =  userService.findByName(name);        //System.out.println(userInfo);        if(userInfo.getRoldId() == 0)            return &quot;admin/main&quot;;        if(userInfo.getRoldId() == 1)            return &quot;student/main&quot;;        if(userInfo.getRoldId() == 2)            return &quot;teacher/main&quot;;        return &quot;&quot;;    }</code></pre><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>搬砖挺舒服的<br><a href="https://github.com/tianjianyi/Student_Exam" target="_blank" rel="noopener" title="GitHub">GitHub</a> 下载源码</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java_web ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全文检索技术lucene</title>
      <link href="/2020/03/18/lucene01/"/>
      <url>/2020/03/18/lucene01/</url>
      
        <content type="html"><![CDATA[<p>vgkbUPXBF0Vrm_CN</p><h2 id="全文检索技术lucene"><a href="#全文检索技术lucene" class="headerlink" title="全文检索技术lucene"></a>全文检索技术lucene</h2><h5 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h5><p>一.什么是全文检索<br>1.什么是数据<br>    1)结构化数据<br>        格式固定、长度固定、数据类型固定。<br>        例如数据库中的数据<br>    2)非结构化数据<br>        word文档、pdf文档、邮件、html、txt<br>        格式不固定、长度不固定、数据类型不固定。</p><p>2、数据的查询<br>    1）结构化数据的查询<br>        SQL语句，查询结构化数据的方法。简单、速度快。<br>    2）非结构化数据的查询<br>        从文本文件中找出包含spring单词的文件。<br>        1、目测<br>        2、使用程序吧文档读取到内存中，然后匹配字符串。顺序扫描。<br>        3、把非结构化数据变成结构化数据<br>            先跟根据空格进行字符串拆分，得到一个单词列表，基于单词列表创建一个索引。<br>            然后查询索引，根据单词和文档的对应关系找到文档列表。这个过程叫做全文检索。</p><pre><code>        索引：一个为了提高查询速度，创建某种数据结构的集合。</code></pre><p>3、全文检索概念<br>    先创建索引然后查询索引的过程叫做全文检索。<br>    索引一次创建可以多次使用。表现为每次查询速度很快。</p><p>二、全文检索的应用场景<br>1、搜索引擎<br>    百度、360搜索、谷歌、搜狗<br>2、站内搜索<br>    论坛搜索、微博、文章搜索<br>3、电商搜索<br>    淘宝搜索、京东搜索<br>4、只要是有搜索的地方就可以使用全文检索技术。</p><p>三、什么是Lucene<br>    Lucene是一个基于Java开发全文检索工具包。</p><p>四、Lucene实现全文检索的流程<br>1、创建索引<br>    1）获得文档<br>        原始文档：要基于那些数据来进行搜索，那么这些数据就是原始文档。<br>        搜索引擎：使用爬虫获得原始文档<br>        站内搜索：数据库中的数据。<br>        案例：直接使用io流读取磁盘上的文件。<br>    2）构建文档对象<br>        对应每个原始文档创建一个Document对象<br>        每个document对象中包含多个域（field）<br>        域中保存就是原始文档数据。<br>            域的名称<br>            域的值<br>        每个文档都有一个唯一的编号，就是文档id<br>    3）分析文档<br>        就是分词的过程<br>        1、根据空格进行字符串拆分，得到一个单词列表<br>        2、把单词统一转换成小写。<br>        3、去除标点符号<br>        4、去除停用词<br>        停用词：无意义的词<br>        每个关键词都封装成一个Term对象中。<br>            Term中包含两部分内容：<br>                关键词所在的域<br>                关键词本身<br>            不同的域中拆分出来的相同的关键词是不同的Term。<br>    4）创建索引<br>        基于关键词列表创建一个索引。保存到索引库中。<br>        索引库中：<br>            索引<br>            document对象<br>            关键词和文档的对应关系<br>        通过词语找文档，这种索引的结构叫倒排索引结构。<br>2、查询索引<br>    1）用户查询接口<br>        用户输入查询条件的地方<br>        例如：百度的搜索框<br>    2）把关键词封装成一个查询对象<br>        要查询的域<br>        要搜索的关键词<br>    3）执行查询<br>        根据要查询的关键词到对应的域上进行搜索。<br>        找到关键词，根据关键词找到 对应的文档<br>    4）渲染结果<br>        根据文档的id找到文档对象<br>        对关键词进行高亮显示<br>        分页处理<br>        最终展示给用户看。<br>五、入门程序<br>1、创建索引<br>    环境：<br>        需要下载Lucene<br>        <a href="http://lucene.apache.org/" target="_blank" rel="noopener">http://lucene.apache.org/</a><br>        最低要求jdk1.8<br>    工程搭建：<br>        创建一个java工程<br>        添加jar：<br>            lucene-analyzers-common-7.4.0.jar<br>            lucene-core-7.4.0.jar<br>            commons-io.jar</p><pre><code>步骤：    1、创建一个Director对象，指定索引库保存的位置。    2、基于Directory对象创建一个IndexWriter对象    3、读取磁盘上的文件，对应每个文件创建一个文档对象。    4、向文档对象中添加域    5、把文档对象写入索引库    6、关闭indexwriter对象</code></pre><p>2、使用luke查看索引库中的内容<br>3、查询索引库<br>    步骤：<br>        1、创建一个Director对象，指定索引库的位置<br>        2、创建一个IndexReader对象<br>        3、创建一个IndexSearcher对象，构造方法中的参数indexReader对象。<br>        4、创建一个Query对象，TermQuery<br>        5、执行查询，得到一个TopDocs对象<br>        6、取查询结果的总记录数<br>        7、取文档列表<br>        8、打印文档中的内容<br>        9、关闭IndexReader对象<br>六、分析器<br>    默认使用的数标准分析器StandardAnalyzer<br>1、查看分析器的分析效果<br>    使用Analyzer对象的tokenStream方法返回一个TokenStream对象。词对象中包含了最终分词结果。<br>    实现步骤：<br>        1）创建一个Analyzer对象，StandardAnalyzer对象<br>        2）使用分析器对象的tokenStream方法获得一个TokenStream对象<br>        3）向TokenStream对象中设置一个引用，相当于数一个指针<br>        4）调用TokenStream对象的rest方法。如果不调用抛异常<br>        5）使用while循环遍历TokenStream对象<br>        6）关闭TokenStream对象<br>2、IKAnalyze的使用方法<br>    1）把IKAnalyzer的jar包添加到工程中<br>    2）把配置文件和扩展词典添加到工程的classpath下<br>    注意：扩展词典严禁使用windows记事本编辑保证扩展词典的编码格式是utf-8<br>    扩展词典：添加一些新词<br>    停用词词典：无意义的词或者是敏感词汇<br>七、索引库维护<br>1、添加文档<br>2、删除文档<br>    1）删除全部<br>    2）根据查询、关键词删除文档<br>3、修改文档<br>    修改的原理是先删除后添加<br>八、索引库查询<br>1、使用Query的子类<br>    1）TermQuery<br>        根据关键词进行查询。<br>        需要指定要查询的域及要查询的关键词<br>    2）RangeQuery<br>        范围查询<br>2、使用QueryPaser进行查询<br>    可以对要查询的内容先分词，然后基于分词的结果进行查询。<br>    添加一个jar包<br>    lucene-queryparser-7.4.0.jar</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java,lucene </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>${pageContext.request.contextPath}解析失败</title>
      <link href="/2020/03/14/java-path/"/>
      <url>/2020/03/14/java-path/</url>
      
        <content type="html"><![CDATA[<h4 id="pageContext-request-contextPath-被解析成了-7BpageContext-request-contextPath-7D"><a href="#pageContext-request-contextPath-被解析成了-7BpageContext-request-contextPath-7D" class="headerlink" title="${pageContext.request.contextPath}被解析成了$%7BpageContext.request.contextPath%7D"></a>${pageContext.request.contextPath}被解析成了$%7BpageContext.request.contextPath%7D</h4><p>这东西困扰了我好几天，一开始以为数据加载问题，清了即便缓存没有效果，后来查了查才知道这东西多么的弱智。</p><p>webapp版本问题。。。</p><p>解决方法：更改web.xml下webapp版本据说要2.4以上，参考：</p><pre><code>&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内推试水加吐槽加分享</title>
      <link href="/2020/03/11/work/"/>
      <url>/2020/03/11/work/</url>
      
        <content type="html"><![CDATA[<p>中午闲着没事做，又不想睡觉，就20分钟做了份简历，找渠道搞了些内推，瞎搞了一翻。考研人的无聊救赎，你们都去找工作吧，弟弟想上岸。<br><img src="/images/blog/1.jpg" alt="被疫情逼疯的考研生"></p><h4 id="1-快手"><a href="#1-快手" class="headerlink" title="1.快手"></a>1.快手</h4><p><a href="https://campus.kuaishou.cn/#/campus/index" target="_blank" rel="noopener" title="kuaishou">点击去投</a></p><h6 id="吐槽和建议"><a href="#吐槽和建议" class="headerlink" title="吐槽和建议"></a>吐槽和建议</h6><p>快手的内推网站做的是真的烂，我的简历就传了一半，就投了，注意看自己的简历，注意多刷新几次。</p><p>快手老铁永久的失去我了<br><img src="/images/blog/2.jpg" alt=""></p><h4 id="2-小米"><a href="#2-小米" class="headerlink" title="2.小米"></a>2.小米</h4><p><a href="https://app.mokahr.com/campus_apply/xiaomi/22018#/jobs?_k=u2rkc9" target="_blank" rel="noopener" title="xiaomi">点击去投</a></p><h5 id="吐槽和建议-1"><a href="#吐槽和建议-1" class="headerlink" title="吐槽和建议"></a>吐槽和建议</h5><p>作为朋友圈小米第一黑粉，也不得不夸小米内推网站体验感还真不错，没有吐槽的地方。OMG投他</p><h4 id="3-网易"><a href="#3-网易" class="headerlink" title="3.网易"></a>3.网易</h4><p><a href="https://campus.163.com/app/index" target="_blank" rel="noopener" title="wangyi">点击去投</a></p><h5 id="吐槽和建议-2"><a href="#吐槽和建议-2" class="headerlink" title="吐槽和建议"></a>吐槽和建议</h5><p>网易这公司真有意思，竞赛只有top3，top10和进入决赛，实习生门槛这么高吗。 自卑.jpg</p><h4 id="4-京东"><a href="#4-京东" class="headerlink" title="4.京东"></a>4.京东</h4><p><a href="http://campus.jd.com/home" target="_blank" rel="noopener" title="jingdong">点击去投</a></p><h5 id="吐槽和建议-3"><a href="#吐槽和建议-3" class="headerlink" title="吐槽和建议"></a>吐槽和建议</h5><p>需要内推码，有需要的童鞋可以私戳我，京东这页面是贼棒的，不过需要成绩单和证书啥的，都在学校就没投。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>先这四个吧，随便一玩竟成了用户体验教验员，快手程序员扣工资，啥网站，体验贼差。<br>不定时更新，欢迎关注我博客。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode2两数相加</title>
      <link href="/2020/03/01/leetcode2/"/>
      <url>/2020/03/01/leetcode2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题意"><a href="#1-题意" class="headerlink" title="1.题意"></a>1.题意</h3><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h3><ol><li>链表还是不是很熟悉</li><li>直接模拟。因为是逆序给出的所以直接遍历一遍按位相加就好了，实现过程中用一个变量记录进位情况</li></ol><h3 id="3-代码展示"><a href="#3-代码展示" class="headerlink" title="3.代码展示"></a>3.代码展示</h3><pre><code>class Solution {public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {        ListNode res(0), *p = &amp;res;        int n = 0;        while(l1 != NULL || l2 != NULL || n){            int sum =0;            if(l1 != NULL) sum += l1 -&gt; val;            if(l2 != NULL) sum += l2 -&gt; val;            sum += n;            n = sum / 10;            p -&gt; next = new ListNode(sum % 10);            p = p -&gt; next;            if(l1 != NULL) l1 = l1 -&gt; next;            if(l2 != NULL) l2 = l2 -&gt; next;        }        return res.next;    }};</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1:两数之和</title>
      <link href="/2020/03/01/leetcode1/"/>
      <url>/2020/03/01/leetcode1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题意"><a href="#1-题意" class="headerlink" title="1. 题意"></a>1. 题意</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h3><ol><li>首先肯定是暴力解法双重循环暴力解决，复杂度 O（n2）</li><li>如果题目是有序的话我们可以二分优化一重循环，不是有序可以用map记录下标但这样也不是很好</li><li>我们可以借鉴桶排序思想用map记录一下，前面出现的值，循环寻找，这样就优化了一重循环，用空间复杂度换时间复杂度</li></ol><h3 id="3-代码展示"><a href="#3-代码展示" class="headerlink" title="3.代码展示"></a>3.代码展示</h3><h6 id="1-暴力解法"><a href="#1-暴力解法" class="headerlink" title="1.暴力解法"></a>1.暴力解法</h6><pre><code>class Solution {public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        int d = nums.size();        vector&lt;int&gt; result;        int flag = 0;        for(int i = 0; i &lt; d; i++){            for(int j = 0; j &lt; d; j++){                if(i == j) continue;                if(nums[i] + nums[j] == target &amp;&amp; i != j){                    result.push_back(i);                    result.push_back(j);                    flag = 1;                    break;                }            }            if(flag) break;        }        return result;    }};</code></pre><h6 id="map优化解法"><a href="#map优化解法" class="headerlink" title="map优化解法"></a>map优化解法</h6><pre><code>class Solution {public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        map&lt;int, int&gt; mp;        int n = nums.size();        for(int i = 0; i &lt; n; i++)        {            if(mp.count(target - nums[i]))                return {mp[target -nums[i]], i};            mp[nums[i]] = i;        }        return {-1, -1};    }};</code></pre><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.好久没打比赛了有点生疏，呜呜呜我哭<br>2.leetcode这oj形式真难用<br>3.博客终于搭好了，开始写点技术类博客</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 的基础操作</title>
      <link href="/2020/03/01/markdown-s-operate/"/>
      <url>/2020/03/01/markdown-s-operate/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题：-H1-H6"><a href="#1、标题：-H1-H6" class="headerlink" title="1、标题：(H1~H6)"></a>1、标题：(H1~H6)</h2><pre><code>H1（#） ----------ctrl+1H2(##) -------------ctrl+2…H6（######） --ctrl+6</code></pre><h2 id="2、引用-（-gt-开头）"><a href="#2、引用-（-gt-开头）" class="headerlink" title="2、引用 （&gt;开头）"></a>2、引用 （&gt;开头）</h2><pre><code>开头以 &gt; 表示，可以嵌套引用</code></pre><p>例：</p><blockquote><p>Hello</p></blockquote><h2 id="3、序列"><a href="#3、序列" class="headerlink" title="3、序列"></a>3、序列</h2><h4 id="3-1-无序序列（-内容）"><a href="#3-1-无序序列（-内容）" class="headerlink" title="3.1 无序序列（+/-/* 内容）"></a>3.1 无序序列（+/-/* 内容）</h4><pre><code>+ Red- Green* Blue</code></pre><p>效果：</p><ul><li>Red</li></ul><ul><li>Green</li></ul><ul><li>Blue</li></ul><h4 id="3-2-有序序列-1-2-3-内容"><a href="#3-2-有序序列-1-2-3-内容" class="headerlink" title="3.2 有序序列 (1/2/3. 内容)"></a>3.2 有序序列 (1/2/3. 内容)</h4><pre><code>1.  Red2.  Green3.    Blue</code></pre><p>效果：</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h4 id="3-3-可选序列-（-内容）"><a href="#3-3-可选序列-（-内容）" class="headerlink" title="3.3 可选序列 （*/+/- [ ] 内容）"></a>3.3 可选序列 （*/+/- [ ] 内容）</h4><pre><code>- [ ] a+ [x] b* [ ] c</code></pre><p>效果：</p><ul><li><input disabled="" type="checkbox"> a</li></ul><ul><li><input checked="" disabled="" type="checkbox"> b</li></ul><ul><li><input disabled="" type="checkbox"> c</li></ul><h2 id="4、代码块（将代码放在两个-之间）"><a href="#4、代码块（将代码放在两个-之间）" class="headerlink" title="4、代码块（将代码放在两个```之间）"></a>4、代码块（将代码放在两个```之间）</h2><p>效果：</p><pre><code>#include&lt;stdio.h&gt;int main(){    printf(&quot;Hello World!\n&quot;);    return 0;}</code></pre><h2 id="5、行内代码-（代码放在两个-之间）"><a href="#5、行内代码-（代码放在两个-之间）" class="headerlink" title="5、行内代码 （代码放在两个``之间）"></a>5、行内代码 （代码放在两个``之间）</h2><pre><code>use the &#39;printf()&#39; function;</code></pre><p>效果：<br>use the <code>printf()</code> function;</p><h2 id="6-数学公式"><a href="#6-数学公式" class="headerlink" title="6.数学公式"></a>6.数学公式</h2><h4 id="6-1-数学块-（-开头）"><a href="#6-1-数学块-（-开头）" class="headerlink" title="6.1 数学块 （$$开头）"></a>6.1 数学块 （$$开头）</h4><pre><code>$$\lim_{x \to \infty} \exp(-x) = 0$$</code></pre><p>效果：<br>$$<br>\lim_{x \to \infty} \exp(-x) = 0<br>$$</p><h4 id="6-2-行内数学公式-（以-开头结尾）"><a href="#6-2-行内数学公式-（以-开头结尾）" class="headerlink" title="6.2 行内数学公式 （以$开头结尾）"></a>6.2 行内数学公式 （以$开头结尾）</h4><pre><code>$\lim_{x \to \infty} \exp(-x) = 0$</code></pre><p>效果：<br>$\lim_{x \to \infty} \exp(-x) = 0$</p><h2 id="7、表格-（-为分割线）"><a href="#7、表格-（-为分割线）" class="headerlink" title="7、表格 （|为分割线）"></a>7、表格 （|为分割线）</h2><p>用法：</p><pre><code>以|为分割线，划分表格例：|1|2|3|4|</code></pre><p>效果：<br>|1|2|3|4|</p><h2 id="8、脚注-（-内容-）"><a href="#8、脚注-（-内容-）" class="headerlink" title="8、脚注 （[^内容]）"></a>8、脚注 （[^内容]）</h2><p>例：</p><pre><code>脚注[^1][^1]:解释</code></pre><p>效果：<br>脚注[^1]</p><h2 id="9、分割线-（-或者—）"><a href="#9、分割线-（-或者—）" class="headerlink" title="9、分割线 （***或者—）"></a>9、分割线 （***或者—）</h2><p>例：</p><pre><code>***</code></pre><p>效果：</p><hr><h2 id="10、YAML-Front-Matter2-（—）"><a href="#10、YAML-Front-Matter2-（—）" class="headerlink" title="10、YAML Front Matter2 （—）"></a>10、YAML Front Matter2 （—）</h2><p>用法：</p><pre><code>在开头输入—</code></pre><p>效果：<br>—input</p><h2 id="11、链接"><a href="#11、链接" class="headerlink" title="11、链接"></a>11、链接</h2><h4 id="11-1-内链-（链接内容）"><a href="#11-1-内链-（链接内容）" class="headerlink" title="11.1 内链 （链接内容）"></a>11.1 内链 （<a href="链接源" title="title">链接内容</a>）</h4><p>例：</p><pre><code>[Baidu](https://www.baidu.com &quot;Baidu&quot;)</code></pre><p>效果：<br><a href="https://www.baidu.com" target="_blank" rel="noopener" title="Baidu">Baidu</a><br>title需要加引号</p><h4 id="11-2-引用链接-（-链接内容-id-）"><a href="#11-2-引用链接-（-链接内容-id-）" class="headerlink" title="11.2 引用链接 （[链接内容][id]）"></a>11.2 引用链接 （[链接内容][id]）</h4><p>用法：</p><pre><code>[链接内容][id][id]:链接源 &quot;title&quot;例：[Baidu][id][id]:http://www.baidu.com &quot;Baidu&quot;</code></pre><p>效果：<br>[Baidu][id]<br>[id]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>    “Baidu”</p><h2 id="12、URLs-（-lt-gt-括住URL）"><a href="#12、URLs-（-lt-gt-括住URL）" class="headerlink" title="12、URLs （&lt;&gt;括住URL）"></a>12、URLs （&lt;&gt;括住URL）</h2><pre><code>用&lt;&gt;括住URL对于标准URL，可自动识别例：www.baidu.com&lt;i@163.com&gt;</code></pre><p>效果:<br><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br><a href="mailto:&#x69;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#x69;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#109;</a></p><h2 id="13、图片"><a href="#13、图片" class="headerlink" title="13、图片"></a>13、图片</h2><p>用法：</p><pre><code>手动添加，前面加!，格式类似链接用鼠标将图片拖入例：![截图](D:\Typora\笔记\1.jpg &quot;截图&quot;)</code></pre><h2 id="14、斜体-（以-或-括住）"><a href="#14、斜体-（以-或-括住）" class="headerlink" title="14、斜体 （以* *或_ _括住）"></a>14、斜体 （以* *或_ _括住）</h2><p>例：</p><pre><code>*example* _example_</code></pre><p>效果：<br><em>example</em> <em>example</em></p><h2 id="15、加粗-（-或-）"><a href="#15、加粗-（-或-）" class="headerlink" title="15、加粗 （** **或__ __）"></a>15、加粗 （** **或__ __）</h2><pre><code>以双或双_开头，以双或双_结尾例：**example** __example__</code></pre><p>效果:<br><strong>example</strong> <strong>example</strong></p><h2 id="16、删除线-（以两个-开头结尾）"><a href="#16、删除线-（以两个-开头结尾）" class="headerlink" title="16、删除线 （以两个~~开头结尾）"></a>16、删除线 （以两个~~开头结尾）</h2><pre><code>以两个~开头，两个~结尾例：~example~</code></pre><p>效果：<br><del>example</del></p><h2 id="17、下划线-（-）"><a href="#17、下划线-（-）" class="headerlink" title="17、下划线 （ ）"></a>17、下划线 （<u> </u>）</h2><pre><code>&lt;u&gt;example&lt;/u&gt;</code></pre><p>效果：<br><u>example</u></p><h2 id="18、表情-（-表情单词-）"><a href="#18、表情-（-表情单词-）" class="headerlink" title="18、表情 （:表情单词:）"></a>18、表情 （:表情单词:）</h2><p>例：</p><pre><code>:smile::angry::happy::cry::weary:            //疲倦的:flushed:        //兴奋的:imp:            //魔鬼</code></pre><p>:smile:<br>:angry:<br>:happy:<br>:cry:<br>:weary:<br>:flushed:<br>:imp:            </p><h2 id="19、下标-（以双-括住内容）"><a href="#19、下标-（以双-括住内容）" class="headerlink" title="19、下标 （以双~括住内容）"></a>19、下标 （以双~括住内容）</h2><pre><code>使用双~括住内容例：H~2~0</code></pre><p>效果：<br>H<del>2</del>0</p><h2 id="20、上标-（以双-括住内容）"><a href="#20、上标-（以双-括住内容）" class="headerlink" title="20、上标 （以双^括住内容）"></a>20、上标 （以双^括住内容）</h2><pre><code>用法：使用双^括住内容例：x^2^</code></pre><p>效果：<br>x^2^</p><h2 id="21、高亮-（以双-括住内容）"><a href="#21、高亮-（以双-括住内容）" class="headerlink" title="21、高亮 （以双==括住内容）"></a>21、高亮 （以双==括住内容）</h2><pre><code>用法：使用双==括住内容例：==asd==</code></pre><p>效果：<br>==asd==</p><h2 id="22、HTML"><a href="#22、HTML" class="headerlink" title="22、HTML"></a>22、HTML</h2><pre><code>例：&lt;button&gt;example&lt;/button&gt;</code></pre><p>效果：<br><button>example</button></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客文章标题设置</title>
      <link href="/2020/02/28/Hello-My-First-Blog/"/>
      <url>/2020/02/28/Hello-My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>Markdown 的文件标题    文章标题，强烈建议填写此选项</p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一</p><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><p>根 _config.yml 中的 author    文章作者</p><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p>featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></p><h2 id="top-true"><a href="#top-true" class="headerlink" title="top    true"></a>top    true</h2><p>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</p><h2 id="cover-false"><a href="#cover-false" class="headerlink" title="cover    false"></a>cover    false</h2><p>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</p><h2 id="coverImg"><a href="#coverImg" class="headerlink" title="coverImg"></a>coverImg</h2><p>无    v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</p><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p> 无    文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc    true"></a>toc    true</h2><p>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项<br>mathjax    false    是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</p><h2 id="summary-无"><a href="#summary-无" class="headerlink" title="summary    无"></a>summary    无</h2><p>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</p><h2 id="categories-无"><a href="#categories-无" class="headerlink" title="categories    无"></a>categories    无</h2><p>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</p><h2 id="tags-无"><a href="#tags-无" class="headerlink" title="tags    无"></a>tags    无</h2><p>文章标签，一篇文章可以多个标签</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/27/hello-world/"/>
      <url>/2020/02/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="hello-tianjian"><a href="#hello-tianjian" class="headerlink" title="hello tianjian"></a>hello tianjian</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
